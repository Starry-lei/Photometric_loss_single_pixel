Intrinsic:

K<< 800.0, 0, 320,
    0, 800.0, 240,
    0,   0,    1;



Code segment(openCV):



double fx = K_(0, 0), cx = K_(0, 2), fy =  K_(1, 1), cy = K_(1, 2), f=30.0;

for (int u = 0; u< depth_map.rows; u++) // colId, cols: 0 to 480
	{
		for (int v = 0; v < depth_map.cols; v++) // rowId,  rows: 0 to 640
		{

		double d=depth_map.at<double>(u,v);
		double d_x1= depth_map.at<double>(u,v+1);
		double d_y1= depth_map.at<double>(u+1, v);

		// calculate 3D point coordinate
		Eigen::Vector2d pixelCoord((double)v,(double)u);//  u is the row id , v is col id
		Eigen::Vector3d p_3d_no_d((pixelCoord(0)-cx)/fx, (pixelCoord(1)-cy)/fy,1.0);
		Eigen::Vector3d p_c1=d*p_3d_no_d; 

		// calculate normal for each point

		Eigen::Matrix<double,3,1> normal, v_x, v_y;
		v_x <<  ((d_x1-d)*(v-cx)+d_x1)/fx, (d_x1-d)*(u-cy)/fy , (d_x1-d);
		v_y << (d_y1-d)*(v-cx)/fx,(d_y1+ (d_y1-d)*(u-cy))/fy, (d_y1-d);
		v_x=v_x.normalized();
		v_y=v_y.normalized();
		normal=v_y.cross(v_x);
		normal=normal.normalized();

                //......................

                  }

           }



